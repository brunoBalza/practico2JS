¬øQu√© es una variable y para qu√© sirve?

Es un espacio reservado en memoria que nos permite almacenar informaci√≥n. Podemos almacenar diferentes tipos de datos para usarlos en nuestro c√≥digo. En JS existe tres formas de crear una variable var, let, const. en ES6 nacen let & const que son variable de tipo scope y esto quiere decir que dependiendo del scope es su accesibilidad.


¬øCu√°l es la diferencia entre declarar e inicializar una variable?

Cuando declaramos una variable, simplemente nombramos la variable, sin indicarle que tipo de informaci√≥n o dato almacenara. En cambio, cuando inicializamos una variable indicamos el tipo de dato e informaci√≥n que va a almacenar.

Ejemplo:

//Declarar una variable
let nombre;
//Inicializar la variable 
nombre = "Camilo"; 
//Podemos generar este proceso en una sola linea de codigo. 
let nombre = "Camilo";


¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings?

Al momento sumar n√∫meros estamos realizando una operaci√≥n matem√°tica con dos tipos de datos (Numbers) mientras que al concatenar estamos sumando dos tipos de datos (String) que son cadena de textos.


¬øCu√°l operador me permite sumar o concatenar?

El operador utilizado es el signo +

----------------------

2Ô∏è‚É£ Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:
Nombre => String
Apellido => strings
Nombre de usuario en Platzi => String
Edad => Numbers
Correo electr√≥nico => strings
Mayor de edad => boolean    
Dinero ahorrado => Numbers
Deudas => Numbers 

Funciones


1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es una funci√≥n?

Es un conjunto de acciones que nos permitir√° reutilizar en nuestro c√≥digo y siempre deben devolver un resultado. Podemos crear diferentes funciones con par√°metros distintos y luego utilizar la informaci√≥n para realizar un evento o acci√≥n dentro de nuestro c√≥digo.


¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo?

Cuando necesitamos repetir una acci√≥n en nuestro c√≥digo, en vez de escribir una suma, por ejemplo en cada l√≠nea, podemos crear una funci√≥n que nos permita sumar elementos cada vez que lo necesitemos y solo cambiamos sus par√°metros.


¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n?

Los par√°metros son las variables declaradas y solicitadas en nuestra funci√≥n, al momento de realizar el llamado de nuestra funciones nos exigir√° declarar nuestras variables que vendr√≠an a ser nuestros argumentos de la funci√≥n.


2Ô∏è‚É£ Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables constantes por par√°metros y argumentos en una funci√≥n:

const name = "Juan David";
const lastname = "Castro Gallego";
const completeName = name + lastname;
const nickname = "juandc";

console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");


Condicionales

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un condicional?

Es una expresi√≥n que nos permite evaluar si es True o False.

¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias?

If‚Ä¶else
Switch
Con el condicional If‚Ä¶Else podemos tener diferentes expresiones para evaluar dependiente del caso, y generar tantos If o else como sea necesario. Mientras que Switch case toma una sola expresi√≥n de entrada pero puede evaluar todos los casos como sea necesario de una forma m√°s ordenada.

¬øPuedo combinar funciones y condicionales?

Podemos encadenar una respuesta desde un condional a otro pero no podemos combinarlo dentro de una misma expresi√≥n. Si podemos ocuparlos de forma separada y luego encadenar una acci√≥n dependiendo del resultado.


2Ô∏è‚É£ Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:

const tipoDeSuscripcion = "Basic";

switch (tipoDeSuscripcion) {
   case "Free":
       console.log("Solo puedes tomar los cursos gratis");
       break;
   case "Basic":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
       break;
   case "Expert":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
       break;
   case "ExpertPlus":
       console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
       break;
}

Respuesta a:
Test de JavaScript
Test Javascript Platzi üöÄ
Te invito a mi GitHub ü§ì

Variables y operaciones
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es una variable y para qu√© sirve?

Es un espacio reservado en memoria que nos permite almacenar informaci√≥n. Podemos almacenar diferentes tipos de datos para usarlos en nuestro c√≥digo. En JS existe tres formas de crear una variable var, let, const. en ES6 nacen let & const que son variable de tipo scope y esto quiere decir que dependiendo del scope es su accesibilidad.

¬øCu√°l es la diferencia entre declarar e inicializar una variable?

Cuando declaramos una variable, simplemente nombramos la variable, sin indicarle que tipo de informaci√≥n o dato almacenara. En cambio, cuando inicializamos una variable indicamos el tipo de dato e informaci√≥n que va a almacenar.

Ejemplo:

//Declarar una variable
let nombre;
//Inicializar la variable 
nombre = "Camilo"; 
//Podemos generar este proceso en una sola linea de codigo. 
let nombre = "Camilo";
¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings?

Al momento sumar n√∫meros estamos realizando una operaci√≥n matem√°tica con dos tipos de datos (Numbers) mientras que al concatenar estamos sumando dos tipos de datos (String) que son cadena de textos.

¬øCu√°l operador me permite sumar o concatenar?

El operador utilizado es el signo +

2Ô∏è‚É£ Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:
Nombre ‚ÄúString‚Äù
Apellido ‚ÄúString‚Äù
Nombre de usuario en Platzi ‚ÄúString‚Äù
Edad ‚ÄúNumber‚Äù
Correo electr√≥nico ‚ÄúString‚Äù
Mayor de edad ‚ÄúBoolean‚Äù
Dinero ahorrado ‚ÄúNumber‚Äù
Deudas ‚ÄúNumber‚Äù
3Ô∏è‚É£ Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.
//Variables 
let name = "Camilo";
let lastName = "Saavedra";
let user_name = "cisaa";
let age = 27;
let mail = "ci.saavedras@gmail.com"
let adult = true;
let savedMoney = 1500;
let debtMoney = 500000;
4Ô∏è‚É£ Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:
Nombre completo (nombre y apellido)
//Nombre completo 
let name = "Camilo";
let lastName = "Saavedra";
console.log(`Mi nombre completo es ${name}${lastName}`);
Dinero real (dinero ahorrado menos deudas)
//Dinero ahorrado
let savedMoney = 1000000;
let debtMoney = 500000;
let totalMoney = savedMoney - debtMoney;
console.log(`El total de mi dinero actual es: $${totalMoney`});
Funciones
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es una funci√≥n?

Es un conjunto de acciones que nos permitir√° reutilizar en nuestro c√≥digo y siempre deben devolver un resultado. Podemos crear diferentes funciones con par√°metros distintos y luego utilizar la informaci√≥n para realizar un evento o acci√≥n dentro de nuestro c√≥digo.

¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo?

Cuando necesitamos repetir una acci√≥n en nuestro c√≥digo, en vez de escribir una suma, por ejemplo en cada l√≠nea, podemos crear una funci√≥n que nos permita sumar elementos cada vez que lo necesitemos y solo cambiamos sus par√°metros.

¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n?

Los par√°metros son las variables declaras y solicitadas en nuestra funci√≥n, al momento de realizar el llamado de nuestra funciones nos exigir√° declarar nuestras variables que vendr√≠an a ser nuestros argumentos de la funci√≥n.

functionmyFunction(par√°metro1 + par√°metro2) {
  //... All my code here
}

myFunction(argumento + argumento2);
//Al declarar las variables par√°metro1 y par√°metro2 estamos generando los argumentos de nuestra funci√≥n. 

2Ô∏è‚É£ Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables constantes por par√°metros y argumentos en una funci√≥n:
const name = "Juan David";
const lastname = "Castro Gallego";
const completeName = name + lastname;
const nickname = "juandc";
console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");
//My solution
functionpresentation(name, lastName, nickName){
  returnconsole.log(`Mi nombre completo es ${name}${lastName}, pero prefiero que me digas ${nickName}.`);
}
presentation("Camilo", "Saavedra", "cisaa");
Condicionales
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un condicional?

Es una expresi√≥n que nos permite evaluar si es True o False.

¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias?

If‚Ä¶else
Switch
Con el condicional If‚Ä¶Else podemos tener diferentes expresiones para evaluar dependiente del caso, y generar tantos If o else como sea necesario. Mientras que Switch case toma una sola expresi√≥n de entrada pero puede evaluar todos los casos como sea necesario de una forma m√°s ordenada.

¬øPuedo combinar funciones y condicionales?

Podemos encadenar una respusta desde un condional a otro pero no podemos combinarlo dentro de una misma expresi√≥n. Si podemos ocuparlos de forma separada y luego encadenar una acci√≥n dependiendo del resultado.

2Ô∏è‚É£ Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:
const tipoDeSuscripcion = "Basic";
switch (tipoDeSuscripcion) {
case"Free":
       console.log("Solo puedes tomar los cursos gratis");
break;
case"Basic":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
break;
case"Expert":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
break;
case"ExpertPlus":
       console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
break;
}
//My solution
const tipoDeSuscripcion = "Basic";
if (tipoDeSuscripcion == "Free") {
	console.log("Solo puedes tomar los cursos gratis");
} elseif (tipoDeSuscripcion == "Basic") {
	 console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
} elseif (tipoDeSuscripcion == "Expert") {
	 console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
} elseif (tipoDeSuscripcion == "ExpertPlus") {
	 console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
} else {
	 console.log("No tienes ninguna suscripci√≥n");
}
3Ô∏è‚É£ Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).
üí° Bonus: si ya eres una experta o experto en el lenguaje, te desaf√≠o a comentar c√≥mo replicar este comportamiento con arrays u objetos y un solo condicional. üòè

let typeSuscripci√≥n = [
"Free",
"Basic", 
"Expert", 
"ExpertPlus"
];
let infoSuscripci√≥n = [
"solo puedes tomar los cursos gratis", 
"puedes tomar casi todos los cursos de Platzi durante un mes", 
"puedes tomar casi todos los cursos de Platzi durante un a√±o", 
"t√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o"];
let userSuscription = "Expert";
for (let i=0; i < typeSuscripci√≥n.length; i++) {
  if (userSuscription == typeSuscripci√≥n[i]) {
  	console.log(`Si estas suscrito al plan ${typeSuscripci√≥n[i]} en el cual ${infoSuscripci√≥n[i]}`)
  }
}
Ciclos

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un ciclo?

Un ciclo es un bucle que se repite hasta que se cumpla una condici√≥n.

¬øQu√© tipos de ciclos existen en JavaScript?

Ciclo For, While, etc.

¬øQu√© es un ciclo infinito y por qu√© es un problema?

Un ciclo infinito es cuando la condici√≥n es infinita, nunca se cumple y, por lo tanto, no existe termino al proceso, por consecuencia nuestro c√≥digo puede fallar y ralentizar nuestras computadoras.

¬øPuedo mezclar ciclos y condicionales?

S√≠, podemos condicionar un ciclo para que se repita todas las veces hasta que se cumplan una condici√≥n que internamente puede tener otra condici√≥n para su evaluaci√≥n.

3Ô∏è‚É£ Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.

1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:

¬øQu√© es un array?

Un array es una colecciones de elementos con valores de una sola variable. Se escriben dentro de [ ‚Ä¶ ], separado por una coma.

¬øQu√© es un objeto?

Es una colecci√≥n de datos relacionados con m√∫ltiples variables con sus valores.

¬øCu√°ndo es mejor usar objetos o arrays?

Ocupamos objetos cuando el conjunto de elementos es muy grande y de distintos tipos de valores.

¬øPuedo mezclar arrays con objetos o incluso objetos con arrays?

2Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.

let myArray = ['Manchester', 'London', 'Liverpool', 'Birmingham', 'Leeds', 'Carlisle'];
functionreadArray(array){
	console.log(array[0])
}
readArray(myArray);

3Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).

let myArray = ['Manchester', 'London', 'Liverpool', 'Birmingham', 'Leeds', 'Carlisle'];
functionreadArray(array) {
  for (let i = 0; i < array.length; i++) {
    console.log(`${i + 1}${array[i]}`)
  }
}
readArray(myArray);

4Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).

let myArray = ['Manchester', 'London', 'Liverpool', 'Birmingham', 'Leeds', 'Carlisle'];
functionreadArray(array) {
  for (let i = 0; i < array.length; i++) {
    console.log(`${i + 1}${array[i]}`)
  }
}
readArray(myArray);